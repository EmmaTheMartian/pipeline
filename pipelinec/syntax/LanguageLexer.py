# Generated from Language.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,165,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,21,1,22,4,22,130,8,22,11,22,12,22,131,1,23,
        1,23,5,23,136,8,23,10,23,12,23,139,9,23,1,24,4,24,142,8,24,11,24,
        12,24,143,1,24,1,24,1,25,1,25,5,25,150,8,25,10,25,12,25,153,9,25,
        1,25,1,25,1,26,1,26,5,26,159,8,26,10,26,12,26,162,9,26,1,26,1,26,
        1,160,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,1,0,5,1,0,48,57,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,2,0,10,10,13,13,
        169,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,59,1,0,0,0,5,62,1,0,0,0,
        7,66,1,0,0,0,9,68,1,0,0,0,11,70,1,0,0,0,13,72,1,0,0,0,15,74,1,0,
        0,0,17,76,1,0,0,0,19,78,1,0,0,0,21,80,1,0,0,0,23,82,1,0,0,0,25,84,
        1,0,0,0,27,86,1,0,0,0,29,88,1,0,0,0,31,90,1,0,0,0,33,94,1,0,0,0,
        35,101,1,0,0,0,37,105,1,0,0,0,39,112,1,0,0,0,41,117,1,0,0,0,43,122,
        1,0,0,0,45,129,1,0,0,0,47,133,1,0,0,0,49,141,1,0,0,0,51,147,1,0,
        0,0,53,156,1,0,0,0,55,56,5,97,0,0,56,57,5,110,0,0,57,58,5,100,0,
        0,58,2,1,0,0,0,59,60,5,111,0,0,60,61,5,114,0,0,61,4,1,0,0,0,62,63,
        5,110,0,0,63,64,5,111,0,0,64,65,5,116,0,0,65,6,1,0,0,0,66,67,5,61,
        0,0,67,8,1,0,0,0,68,69,5,44,0,0,69,10,1,0,0,0,70,71,5,59,0,0,71,
        12,1,0,0,0,72,73,5,40,0,0,73,14,1,0,0,0,74,75,5,41,0,0,75,16,1,0,
        0,0,76,77,5,123,0,0,77,18,1,0,0,0,78,79,5,125,0,0,79,20,1,0,0,0,
        80,81,5,43,0,0,81,22,1,0,0,0,82,83,5,45,0,0,83,24,1,0,0,0,84,85,
        5,42,0,0,85,26,1,0,0,0,86,87,5,47,0,0,87,28,1,0,0,0,88,89,5,37,0,
        0,89,30,1,0,0,0,90,91,5,118,0,0,91,92,5,97,0,0,92,93,5,114,0,0,93,
        32,1,0,0,0,94,95,5,114,0,0,95,96,5,101,0,0,96,97,5,116,0,0,97,98,
        5,117,0,0,98,99,5,114,0,0,99,100,5,110,0,0,100,34,1,0,0,0,101,102,
        5,102,0,0,102,103,5,117,0,0,103,104,5,110,0,0,104,36,1,0,0,0,105,
        106,5,105,0,0,106,107,5,109,0,0,107,108,5,112,0,0,108,109,5,117,
        0,0,109,110,5,114,0,0,110,111,5,101,0,0,111,38,1,0,0,0,112,113,5,
        112,0,0,113,114,5,117,0,0,114,115,5,114,0,0,115,116,5,101,0,0,116,
        40,1,0,0,0,117,118,5,116,0,0,118,119,5,114,0,0,119,120,5,117,0,0,
        120,121,5,101,0,0,121,42,1,0,0,0,122,123,5,102,0,0,123,124,5,97,
        0,0,124,125,5,108,0,0,125,126,5,115,0,0,126,127,5,101,0,0,127,44,
        1,0,0,0,128,130,7,0,0,0,129,128,1,0,0,0,130,131,1,0,0,0,131,129,
        1,0,0,0,131,132,1,0,0,0,132,46,1,0,0,0,133,137,7,1,0,0,134,136,7,
        2,0,0,135,134,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,137,138,1,
        0,0,0,138,48,1,0,0,0,139,137,1,0,0,0,140,142,7,3,0,0,141,140,1,0,
        0,0,142,143,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,145,1,0,
        0,0,145,146,6,24,0,0,146,50,1,0,0,0,147,151,5,35,0,0,148,150,8,4,
        0,0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,
        0,0,152,154,1,0,0,0,153,151,1,0,0,0,154,155,6,25,0,0,155,52,1,0,
        0,0,156,160,5,34,0,0,157,159,9,0,0,0,158,157,1,0,0,0,159,162,1,0,
        0,0,160,161,1,0,0,0,160,158,1,0,0,0,161,163,1,0,0,0,162,160,1,0,
        0,0,163,164,5,34,0,0,164,54,1,0,0,0,6,0,131,137,143,151,160,1,6,
        0,0
    ]

class LanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    AND = 1
    OR = 2
    NOT = 3
    EQ = 4
    COMMA = 5
    SEMI = 6
    LPAREN = 7
    RPAREN = 8
    LCURLY = 9
    RCURLY = 10
    ADD = 11
    SUB = 12
    MUL = 13
    DIV = 14
    MOD = 15
    VAR = 16
    RETURN = 17
    FUN = 18
    IMPURE = 19
    PURE = 20
    TRUE = 21
    FALSE = 22
    INT = 23
    ID = 24
    WS = 25
    COMMENT = 26
    STRING = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'and'", "'or'", "'not'", "'='", "','", "';'", "'('", "')'", 
            "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'var'", "'return'", 
            "'fun'", "'impure'", "'pure'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "AND", "OR", "NOT", "EQ", "COMMA", "SEMI", "LPAREN", "RPAREN", 
            "LCURLY", "RCURLY", "ADD", "SUB", "MUL", "DIV", "MOD", "VAR", 
            "RETURN", "FUN", "IMPURE", "PURE", "TRUE", "FALSE", "INT", "ID", 
            "WS", "COMMENT", "STRING" ]

    ruleNames = [ "AND", "OR", "NOT", "EQ", "COMMA", "SEMI", "LPAREN", "RPAREN", 
                  "LCURLY", "RCURLY", "ADD", "SUB", "MUL", "DIV", "MOD", 
                  "VAR", "RETURN", "FUN", "IMPURE", "PURE", "TRUE", "FALSE", 
                  "INT", "ID", "WS", "COMMENT", "STRING" ]

    grammarFileName = "Language.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


